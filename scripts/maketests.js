// Native
const { writeFileSync } = require('fs')
const { resolve } = require('path')

// Packages
const { minify } = require('html-minifier')
const request = require('request')

let exampleNumber = 1
let state = 0 // 0 regular text, 1 markdown example, 2 html output
let section = ''
let version = ''
let markdownLines = []
let htmlLines = []
const tests = []

const SPEC_URL =
  'https://raw.githubusercontent.com/github/cmark/master/test/spec.txt'

const normalize = str => {
  return minify(str).replace(/\\n/g, '')
}

request.get(SPEC_URL, (err, res, text) => {
  if (!err && res.statusCode === 200) {
    // Build tests
    text.split('\n').forEach(line => {
      line = line.trim()
      if (line.startsWith('```````````````````````````````` example')) {
        state = 1
      } else if (line === '````````````````````````````````') {
        state = 0
        tests.push({
          example: exampleNumber,
          html: htmlLines.join('\\n').replace('→', '\t'),
          markdown: markdownLines.join('\\n').replace('→', '\t'),
          section
        })
        markdownLines = []
        htmlLines = []
        exampleNumber++
      } else if (line === '.') {
        state = 2
      } else if (state === 1) {
        markdownLines.push(line)
      } else if (state === 2) {
        htmlLines.push(line)
      } else if (state === 0 && /#+ /.test(line)) {
        section = /#+(.*)/.exec(line)[1].trim()
      } else if (state === 0 && /version: /.test(line)) {
        version = /version: (.*)/.exec(line)[1].trim()
      }
    })

    // Test file template
    let tmpl = `// This file is automatically generated by 'maketests' script
      //
      // Updated on: ${new Date().toDateString()}
      // GFM Spec version: ${version}-gfm
      //
      // DO NOT MODIFY it manually!!

      // Packages
      import test from 'ava'
      import { minify } from 'html-minifier'

      // Ours
      import compile from '../src'

      // Return normalized form of HTML which ignores insignificant output
      // differences
      const normalize = ${normalize.toString()}

    ${tests
      .map(test => {
        let html = test['html']
        let md = `compile('${stringEscape(test['markdown'])}')`
        try {
          html = normalize(html)
          md = `normalize(${md})`
        } catch (__) {
          // garbage in, garbage out
        }
        return `
          test('${stringEscape(
            test['section']
          )} (https://github.github.com/gfm/#example-${test[
          'example'
        ]})', (t) => {
            const actual = ${md}
            t.is('${stringEscape(html)}', actual)
          })`
      })
      .join('\n')}`

    writeFileSync(resolve(__dirname, '..', 'test', 'spec.ts'), tmpl, 'utf8')
    console.log('Done!')
  } else {
    console.log(`Failed to download specification file`)
    console.log(`code (${res.statusCode})`)
    console.log(err)
  }
})

const stringEscape = str => {
  return (
    str
      // escape (')
      .replace(/(([^\\])(')|\\$)/g, "$2\\'")
      // escape octal literals
      .replace(/\\(?:[1-7])/g, '\\\\')
  )
}
